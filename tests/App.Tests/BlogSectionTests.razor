@using App.Blog
@using App.Blog.Services
@using App.Home.Components
@using NSubstitute
@inherits AppTestContext
@code {

    [Fact(DisplayName = "Blog section should show when feature flag is ON")]
    public async Task BlogSection_Shows_WhenFeatureFlagIsOn()
    {
        var repo = AddMockBlogRepository(postCount: 3);
        var component = Render(@<AppBlogSection/>);
        
        Assert.NotEmpty(component.FindAll("#blog"));

        foreach (var post in await repo.GetRecentPostsAsync())
        {
            Assert.Contains(post.Title, component.FindAll(".blog-post-title").Select(t => t.TextContent));
        }
    }

    [Fact(DisplayName = "Blog section should NOT show when feature flag is OFF")]
    public void BlogSection_DoesNotShow_WhenFeatureFlagIsOff()
    {
        AddMockBlogRepository(postCount: 3);
        DisableFeature(FeatureFlags.Blog);

        var component = Render(@<AppBlogSection/>);
        Assert.Empty(component.FindAll("#blog"));
    }

    [Fact(DisplayName = "Blog section should NOT show when there are no posts")]
    public void BlogSection_DoesNotShow_WhenNoPosts()
    {
        AddMockBlogRepository(postCount: 0);

        var component = Render(@<AppBlogSection/>);
        Assert.Empty(component.FindAll("#blog"));
    }
    
    private IBlogRepository AddMockBlogRepository(int postCount)
    {
        var blogRepository = Substitute.For<IBlogRepository>();
        var posts = new List<RecentBlogPost>();
        for (var i = 0; i < postCount; i++)
        {
            posts.Add(new RecentBlogPost
            {
                Id = Guid.CreateVersion7(),
                Slug = $"post-{i}",
                Title = $"Post Title {i}",
                ContentPreview = $"This is the preview for post {i}.",
                CreatedAt = DateTimeOffset.UtcNow.AddMinutes(-i * 10)
            });
        }
        
        blogRepository.GetRecentPostsAsync().Returns(Task.FromResult(posts.ToArray()));
        Services.AddSingleton(blogRepository);
        return blogRepository;
    }
}
