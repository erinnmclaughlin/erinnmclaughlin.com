@page "/"
@using App.Features
@using App.Integrations.GitHub
@using App.Integrations.GitHub.Models
@using App.Integrations.Steam
@attribute [StreamRendering]

<PageTitle>Home</PageTitle>

<div class="top-border"></div>

<div class="page">
    <header class="page-header">
        <div class="page-header-content">
            <div class="image">
                <img alt="Erin" src="me.png" />
            </div>
            <div class="greeting">
                <h1 class="greeting-title">Hi, I'm Erin.</h1>
                <p class="greeting-subtitle">I'm a .NET software engineer passionate about building systems.</p>
                <p class="external-links">
                    <a class="link" href="https://github.com/erinnmclaughlin" target="_blank">
                        <span class="icon">
                            <i class="fa-brands fa-github fa-xl"></i>
                        </span>
                    </a>
                    <a class="link" href="https://www.linkedin.com/in/e1mclaughlin/" target="_blank">
                        <span class="icon">
                            <i class="fa-brands fa-linkedin fa-xl"></i>
                        </span>
                    </a>
                </p>
            </div>
        </div>
    </header>
    <div class="page-content">
        <div class="page-content-inner">
            <div class="info-block">
                <h2 class="heading">Featured Projects</h2>
                @if (FeaturedProjects is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <div class="card-container">
                        @foreach (var featuredProject in FeaturedProjects)
                        {
                            <ProjectCard Project="@featuredProject" />
                        }
                    </div>
                }
            </div>
            
            <div class="info-block" id="gists">
                <h3 class="heading">My Gists</h3>
                @if (Gists is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <ul style="padding-left: 1rem;">
                        @foreach (var gist in Gists.Where(g => g.Public))
                        {
                            <li>
                                <a href="@gist.Url" target="_blank">@gist.Description</a>
                            </li>
                        }
                    </ul>
                }
            </div>
            
            <div class="info-block" id="games">
                <h3 class="heading">Recently Played Games</h3>
                @if (Games is null)
                {
                    <p><em>Loading...</em></p>
                }
                else if (Games.Length == 0)
                {
                    <p>Nothin'</p>
                }
                else
                {
                    <ul style="padding-left: 1rem;">
                        @foreach (var game in Games)
                        {
                            <li>
                                @if (game.GetIconUrl() is { } logoUrl)
                                {
                                    <span><img alt="@game.Name Logo" src="@logoUrl"/></span>
                                }
                                <span>@game.Name (@((game.Playtime / 60.0).ToString("0.0")) hours)</span>
                            </li>
                        }
                    </ul>
                }
            </div>
           
        </div>
    </div>
</div>

@code {

    private readonly IFeaturedProjectsProvider _featuredProjectsProvider;
    private readonly IGitHubApiClient _githubApiClient;
    private readonly ISteamApiClient _steamApiClient;
    
    private FeaturedProject[]? FeaturedProjects { get; set; }
    private RecentlyPlayedGame[]? Games { get; set; }
    private GitHubGist[]? Gists { get; set; }

    public Home(IFeaturedProjectsProvider featuredProjectsProvider, IGitHubApiClient githubApiClient, ISteamApiClient steamApiClient)
    {
        _featuredProjectsProvider = featuredProjectsProvider;
        _githubApiClient = githubApiClient;
        _steamApiClient = steamApiClient;
    }
    
    protected override async Task OnInitializedAsync()
    {
        FeaturedProjects = await _featuredProjectsProvider.GetFeaturedProjectsAsync();
        Gists = await _githubApiClient.ListGists();
        Games = await _steamApiClient.GetRecentlyPlayedGames();
    }
}
